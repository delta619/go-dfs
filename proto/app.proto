syntax = "proto3";
option go_package = "./messages";


message Action{
    string action = 1;
    string context = 2;
}

// Message used for storing a file chunk
message UploadChunkRequest {
    string chunk_name = 1;
    string file_name = 2;
    bytes chunk_data = 3;
}
message UploadFileMetaRequest {
    string file_name = 1;
    // list of chunk names
    repeated string chunk_names = 2;
    
}

// Message used for retrieving a file chunk
message ChunkRequest {
    string chunkName = 1;
}

message ChunkResponse {
    bytes chunkData = 1;
    string chunkName = 2;
}

 
message ChunkRouteRequest {
    string chunkName = 1;
    int64 currentPart = 2;
    int64 totalParts = 3;
    int64 chunkSize = 4;
    string fileName = 5;
}
message ChunkRouteResponse {
    string chunkName = 1;
    string node = 2;
    int64 currentPart = 3;
    int64 totalParts = 4;
    int64 chunkSize = 5;
    bool success = 6;
    string fileName = 7;
}

// A Registration of Chunk by Node to Controller as soon as Chunk get saved in any node.
// Updates the node meta in Controller
message ChunkSaved {
    string chunkName = 1;
    string node = 2;
    bool replication = 3;
    bool makePrimary = 4;

}

// As soon as the Chunk gets saved at Node and after ChunkSaved is received, 
// ChunkReplicaRoute informs node to push tje Chunk to multiple Nodes as per this message
message ChunkReplicaRoute{
    string chunkName =1;
    repeated string otherNodes = 2;
}

message PutChunkReplica{
    string chunkName = 1;
    bytes chunkData = 2;

}

message GetChunkReplica{
    string chunkName = 1;
    bytes chunkData = 2;
}


message Heartbeat{
    string host = 1;
    bool beat = 2;
    string message = 3;
    uint64 disk_space = 4;
}

message Register{
    string host = 1;
    string port = 2;
    string message = 3;
}

message Response{
    bool Success = 1;
    string host = 2;
    string message = 3;
}

message StoreRequest {
    string file_name = 1;
    int64 file_size = 2;
  }
  
// Message used for confirming the storage of a new file
message StoreResponse {
    bool success = 1;
    string message = 2;
    string file_name = 3;
}

// Message used for retrieving an existing file
message RetrieveRequest {
    string file_name = 1;
}

message Chunk{
    string chunkName = 1;
    string primaryNode = 2;
    repeated string secondaryNodes = 3;
    string fileName = 4;
}
// Message used for providing an existing file
message RetrieveResponse {
    repeated string chunk_names = 1;
    repeated string chunk_nodes = 2;
    string fileName = 3;
    repeated Chunk chunks = 4;
    bool success = 5;
    string message = 6;

}

// Message used for deleting an existing file
message DeleteRequest {
string fileName = 1;
}

message DeleteResponse {
string fileName = 1;
bool success = 2;
}

message DeleteChunk {
    string ChunkName = 1;
}

message DeleteChunkAck {
    string chunkName = 1;
    bool success =2;
    string node = 3;
}

// Message used for listing all files in the system
message ListRequest {

}

// Message used for providing a list of all files in the system
message ListResponse {
    repeated string file_names = 1;
    repeated int64 status_list = 2;
}

  
message FilePush {
    string file_name = 2;
    bytes file_data = 3;
    int32 file_size = 4;
    bytes checksum = 5;
}

message ChunkProxyPush{
    string destNode = 2;
    string chunkName = 3;
}

message Request{
    string file_name = 1;
    int32 file_size = 2;
    string action = 3;
    bool acknowledged = 4;

}




message Wrapper {
    oneof msg {
        Action action = 1;
        Register register = 2;
        Heartbeat heartbeat = 3;
        Response response = 4;

        Request file_request = 5;
        FilePush file_push = 6;
        Response file_response = 7;

        StoreRequest store_request = 8;
        StoreResponse store_response = 9;

        ChunkRouteRequest chunk_route_request = 10;
        ChunkRouteResponse chunk_route_response = 11;

        UploadChunkRequest upload_chunk_request = 12;

        ChunkSaved chunk_saved = 13;
        ChunkReplicaRoute chunkReplicaRoute = 19;
        PutChunkReplica putChunkReplica = 20;
        GetChunkReplica getChunkReplica = 21;

        UploadFileMetaRequest upload_file_meta_request = 14;

        RetrieveRequest retrieve_request = 15;
        RetrieveResponse retrieve_response = 16;

        ChunkRequest chunk_request = 17;
        ChunkResponse chunk_response = 18;

        ListRequest list_request = 22;
        ListResponse list_response = 23;

        DeleteRequest delete_request = 24;
        DeleteResponse delete_response = 25;

        DeleteChunk delete_chunk = 26;
        DeleteChunkAck delete_chunk_ack = 27;

        ChunkProxyPush chunk_proxy_push = 28;
    }
}



/*
Always use capitalised objects
In case of _, omit it and use the capitalised subpart of the substrings
getter can be accessed by travering through object trees and using a .Get`Value`() function
*/